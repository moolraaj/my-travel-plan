'use client'

import { EXPORT_ALL_APIS } from '@/utils/apis/api';
import Layout from './_common/layout/layout';
import Homepage from './_homepage/homepage';
import { useEffect, useState } from 'react';

export default function Home() {
    let api = EXPORT_ALL_APIS();
    let [loading, setLoading] = useState(true);
    let [continent, setContinent] = useState([]);
    let [country, setCountry] = useState([]);
    let [city, setCity] = useState([]);
    let [packages, setPackages] = useState([]);
    let [blogs, setBlogs] = useState([]);

    const fetchData = async () => {
        try {
            const localStorageKeyPrefix = 'myAppData_';
            // Check if data exists in localStorage
            const storedContinents = localStorage.getItem(`${localStorageKeyPrefix}continents`);
            if (storedContinents) {
                setContinent(JSON.parse(storedContinents));
            } else {
                const data = await api.loadAllContinents();
                setContinent(data);
                localStorage.setItem(`${localStorageKeyPrefix}continents`, JSON.stringify(data));
            }

            const storedCountries = localStorage.getItem(`${localStorageKeyPrefix}countries`);
            if (storedCountries) {
                setCountry(JSON.parse(storedCountries));
            } else {
                const data = await api.loadAllCountries();
                setCountry(data);
                localStorage.setItem(`${localStorageKeyPrefix}countries`, JSON.stringify(data));
            }

            const storedCities = localStorage.getItem(`${localStorageKeyPrefix}cities_with_lowest_prices`);
            if (storedCities) {
                setCity(JSON.parse(storedCities));
            } else {
                const data = await api.loadAllCitiesWithLowestPrices();
                setCity(data);
                localStorage.setItem(`${localStorageKeyPrefix}cities_with_lowest_prices`, JSON.stringify(data));
            }

            const storedPackages = localStorage.getItem(`${localStorageKeyPrefix}packages`);
            if (storedPackages) {
                setPackages(JSON.parse(storedPackages));
            } else {
                const data = await api.loadAllPackages();
                setPackages(data);
                localStorage.setItem(`${localStorageKeyPrefix}packages`, JSON.stringify(data));
            }

            const storedBlogs = localStorage.getItem(`${localStorageKeyPrefix}blogs`);
            if (storedBlogs) {
                setBlogs(JSON.parse(storedBlogs));
            } else {
                const data = await api.loadAllBlogs();
                setBlogs(data);
                localStorage.setItem(`${localStorageKeyPrefix}blogs`, JSON.stringify(data));
            }

            setLoading(false);
        } catch (error) {
            console.error("Error fetching data: ", error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    return (
        <>
            <Layout>
                <Homepage 
                    continent={continent} 
                    loading={loading} 
                    country={country} 
                    city={city} 
                    packages={packages} 
                    blogs={blogs} 
                />
            </Layout>
        </>
    );
}



















// src/utils/apis/api.jsx
import { handelAsyncErrors } from "@/helpers/asyncErrors";

export const EXPORT_ALL_APIS = () => {
    const storageKeyPrefix = 'myAppData_'; // Prefix for storage keys
    
    const loadAllContinents = async () => {
        const key = `${storageKeyPrefix}continents`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/continents/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSingleContinent = async (slug) => {
        const key = `${storageKeyPrefix}continent_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/continent/getbyslug/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllCountries = async () => {
        const key = `${storageKeyPrefix}countries`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/countries/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSingleCountry = async (slug) => {
        const key = `${storageKeyPrefix}country_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/countries/get/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSingleCity = async (slug) => {
        const key = `${storageKeyPrefix}city_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/city/getbyslug/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllPackages = async () => {
        const key = `${storageKeyPrefix}packages`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/packages/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSinglePackage = async (slug) => {
        const key = `${storageKeyPrefix}package_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/package/getbyslug/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllBlogs = async () => {
        const key = `${storageKeyPrefix}blogs`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/blogs/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSingleBlog = async (slug) => {
        const key = `${storageKeyPrefix}blog_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/blog/getbyslug/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllCities = async () => {
        const key = `${storageKeyPrefix}cities`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/cities/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllCitiesWithLowestPrices = async () => {
        const key = `${storageKeyPrefix}citiesWithLowestPrices`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/cities/cities-with-lowest-price`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadSingleActivity = async (slug) => {
        const key = `${storageKeyPrefix}activity_${slug}`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/activity/getbyslug/${slug}`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const loadAllActivities = async () => {
        const key = `${storageKeyPrefix}activities`;
        const storedData = localStorage.getItem(key);
        if (storedData) {
            return JSON.parse(storedData);
        }

        const data = await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/activities/get`);
            let data = await resp.json();
            localStorage.setItem(key, JSON.stringify(data));
            return data;
        });

        return data;
    };

    const sendQueryContactUs = async (formData) => {
        return await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/sendquery/query/send`, {
                method: 'POST',
                body: formData
            });
            let data = await resp.json();
            return data;
        });
    };

    const registerUser = async (phoneNumber, name) => {
        return await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/otpuser/register`, {
                method: 'POST',
                body: JSON.stringify({ phoneNumber, name }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            let result = await resp.json();
            return result;
        });
    };

    const loadAllRegisteredUsers = async () => {
        return await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/otpuser/getallusers`, {
                method: 'POST',
                body: JSON.stringify(),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            let result = await resp.json();
            return result;
        });
    };

    const sendQueryBookings = async (formData) => {
        return await handelAsyncErrors(async () => {
            let resp = await fetch(`/api/v1/flight/query/send`, {
                method: 'POST',
                body: formData
            });
            let data = await resp.json();
            return data;
        });
    };

    return {
        loadAllContinents,
        loadSingleContinent,
        loadSingleCountry,
        loadSingleCity,
        loadAllCountries,
        loadAllPackages,
        loadAllBlogs,
        loadSingleBlog,
        loadAllCitiesWithLowestPrices,
        loadAllCities,
        loadSinglePackage,
        loadSingleActivity,
        loadAllActivities,
        sendQueryContactUs,
        registerUser,
        loadAllRegisteredUsers,
        sendQueryBookings,
    };
};

export const PER_PAGE_LIMIT = 10;
